(()=>{"use strict";var r,e,t,o,n,a={607:(r,e,t)=>{t.a(r,(async r=>{async function e(){let r;return new Promise(((e,t)=>{setTimeout((()=>{r=Math.round(10*Math.random()),r<5&&t("too small "+r),e(r)}),2e3*Math.random())}))}const t=[];t[0]=await e(),console.log("prvi broj je",t[0]),t[1]=await e(),console.log("drugi broj je",t[1]),t[2]=await e(),console.log("treci broj je",t[2]),r()}),1)}},c={};function i(r){var e=c[r];if(void 0!==e)return e.exports;var t=c[r]={exports:{}};return a[r](t,t.exports,i),t.exports}r="function"==typeof Symbol?Symbol("webpack then"):"__webpack_then__",e="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",t=r=>{r&&(r.forEach((r=>r.r--)),r.forEach((r=>r.r--?r.r++:r())))},o=r=>!--r.r&&r(),n=(r,e)=>r?r.push(e):o(e),i.a=(a,c,i)=>{var p,s,u,l=i&&[],f=a.exports,b=!0,h=!1,m=(e,t,o)=>{h||(h=!0,t.r+=e.length,e.map(((e,n)=>e[r](t,o))),h=!1)},y=new Promise(((r,e)=>{u=e,s=()=>(r(f),t(l),l=0)}));y[e]=f,y[r]=(r,e)=>{if(b)return o(r);p&&m(p,r,e),n(l,r),y.catch(e)},a.exports=y,c((a=>{if(!a)return s();var c,i;p=(a=>a.map((a=>{if(null!==a&&"object"==typeof a){if(a[r])return a;if(a.then){var c=[];a.then((r=>{i[e]=r,t(c),c=0}));var i={[r]:(r,e)=>(n(c,r),a.catch(e))};return i}}return{[r]:r=>o(r),[e]:a}})))(a);var u=new Promise(((r,t)=>{(c=()=>r(i=p.map((r=>r[e])))).r=0,m(p,c,t)}));return c.r?u:i})).then(s,u),b=!1},i.d=(r,e)=>{for(var t in e)i.o(e,t)&&!i.o(r,t)&&Object.defineProperty(r,t,{enumerable:!0,get:e[t]})},i.o=(r,e)=>Object.prototype.hasOwnProperty.call(r,e),i(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,